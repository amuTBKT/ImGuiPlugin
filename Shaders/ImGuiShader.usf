// Copyright 2024-25 Amit Kumar Mehar. All Rights Reserved.

#include "/Engine/Private/Common.ush"
#include "/Engine/Private/GammaCorrectionCommon.ush"

float4x4 ProjectionMatrix;

void MainVS(
	in float2 InPosition : ATTRIBUTE0,
	in float2 InUV : ATTRIBUTE1,
	in float4 InColor : ATTRIBUTE2,
	out float4 ClipPosition : SV_POSITION,
	out float2 OutUV : TEXCOORD0,
	out float4 OutColor : COLOR0)
{
	ClipPosition = mul(float4(InPosition.xy, 0.f, 1.f), ProjectionMatrix);
	OutUV = InUV;
	OutColor = InColor.bgra;
}

Texture2D Texture;
SamplerState TextureSampler;
int IsTextureSrgb;
uint RenderStateOverrides;

void MainPS(
	in float4 ScreenPosition : SV_POSITION,
	in float2 InUV : TEXCOORD0,
	in float4 InColor : COLOR0,
	out float4 OutColor : SV_Target0)
{
	// read overrides (should match EImGuiRenderState)
	const bool bDisableAlphaBlending = ((RenderStateOverrides & 0x1) > 0);

	float4 TextureColor = Texture2DSample(Texture, TextureSampler, InUV);

	// source texture is SRGB, need to handle the conversion inside shader
	if (IsTextureSrgb > 0)
	{
		TextureColor.xyz = LinearToSrgb(saturate(TextureColor.rgb));
	}

	OutColor = InColor * TextureColor;

	if (bDisableAlphaBlending)
	{
		OutColor.a = 1;
	}
}
